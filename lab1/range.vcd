$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 # clk $end
  $var wire 16 ' count [15:0] $end
  $var wire  1 & done $end
  $var wire  1 $ go $end
  $var wire 32 % start [31:0] $end
  $scope module range $end
   $var wire 32 , RAM_ADDR_BITS [31:0] $end
   $var wire 32 + RAM_WORDS [31:0] $end
   $var wire  4 ( addr [3:0] $end
   $var wire  1 & cdone $end
   $var wire  1 $ cgo $end
   $var wire  1 # clk $end
   $var wire 16 ' count [15:0] $end
   $var wire 16 / din [15:0] $end
   $var wire  1 & done $end
   $var wire  1 $ go $end
   $var wire 16 0 mem[0] [15:0] $end
   $var wire 16 : mem[10] [15:0] $end
   $var wire 16 ; mem[11] [15:0] $end
   $var wire 16 < mem[12] [15:0] $end
   $var wire 16 = mem[13] [15:0] $end
   $var wire 16 > mem[14] [15:0] $end
   $var wire 16 ? mem[15] [15:0] $end
   $var wire 16 1 mem[1] [15:0] $end
   $var wire 16 2 mem[2] [15:0] $end
   $var wire 16 3 mem[3] [15:0] $end
   $var wire 16 4 mem[4] [15:0] $end
   $var wire 16 5 mem[5] [15:0] $end
   $var wire 16 6 mem[6] [15:0] $end
   $var wire 16 7 mem[7] [15:0] $end
   $var wire 16 8 mem[8] [15:0] $end
   $var wire 16 9 mem[9] [15:0] $end
   $var wire 32 % n [31:0] $end
   $var wire  4 - num [3:0] $end
   $var wire  1 . running $end
   $var wire 32 % start [31:0] $end
   $var wire  1 . we $end
   $scope module c1 $end
    $var wire  1 # clk $end
    $var wire  1 * computation_done $end
    $var wire 32 ) current_value [31:0] $end
    $var wire  1 & done $end
    $var wire 32 ) dout [31:0] $end
    $var wire  1 $ go $end
    $var wire 32 % n [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1$
b00000000000000000000000000000111 %
0&
b0000000000000000 '
b0111 (
b00000000000000000000000000000000 )
0*
b00000000000000000000000000010000 +
b00000000000000000000000000000100 ,
b0000 -
0.
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
#10
1#
b00000000000000000000000000000111 )
#20
0#
#30
1#
#40
0#
0$
#50
1#
b00000000000000000000000000010110 )
#60
0#
#70
1#
b00000000000000000000000000001011 )
#80
0#
#90
1#
b00000000000000000000000000100010 )
#100
0#
#110
1#
b00000000000000000000000000010001 )
#120
0#
#130
1#
b00000000000000000000000000110100 )
#140
0#
#150
1#
b00000000000000000000000000011010 )
#160
0#
#170
1#
b00000000000000000000000000001101 )
#180
0#
#190
1#
b00000000000000000000000000101000 )
#200
0#
#210
1#
b00000000000000000000000000010100 )
#220
0#
#230
1#
b00000000000000000000000000001010 )
#240
0#
#250
1#
b00000000000000000000000000000101 )
#260
0#
#270
1#
b00000000000000000000000000010000 )
#280
0#
#290
1#
b00000000000000000000000000001000 )
#300
0#
#310
1#
b00000000000000000000000000000100 )
#320
0#
#330
1#
b00000000000000000000000000000010 )
#340
0#
#350
1#
b00000000000000000000000000000001 )
#360
0#
#370
1#
1&
1*
#380
0#
b00000000000000000000000000000000 %
b0000 (
#390
1#
#400
0#
b00000000000000000000000000000001 %
b0001 (
#410
1#
#420
0#
b00000000000000000000000000000010 %
b0010 (
#430
1#
#440
0#
b00000000000000000000000000000011 %
b0011 (
#450
1#
#460
0#
b00000000000000000000000000000100 %
b0100 (
#470
1#
#480
0#
b00000000000000000000000000000101 %
b0101 (
#490
1#
#500
0#
b00000000000000000000000000000110 %
b0110 (
#510
1#
#520
0#
b00000000000000000000000000000111 %
b0111 (
#530
1#
#540
0#
b00000000000000000000000000001000 %
b1000 (
#550
1#
#560
0#
b00000000000000000000000000001001 %
b1001 (
#570
1#
#580
0#
b00000000000000000000000000001010 %
b1010 (
#590
1#
#600
0#
b00000000000000000000000000001011 %
b1011 (
#610
1#
#620
0#
b00000000000000000000000000001100 %
b1100 (
#630
1#
#640
0#
b00000000000000000000000000001101 %
b1101 (
#650
1#
#660
0#
b00000000000000000000000000001110 %
b1110 (
#670
1#
#680
0#
b00000000000000000000000000001111 %
b1111 (
#690
1#
